@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@ViewBag.Title.</h2>
<h3>@ViewBag.Message</h3>


<h2>The Good</h2>
<ul>
    <li>Focused specific scope. it does not try to do it all</li>
    <li>Plays nicely with other JS frameworks as it is agnositc to them.</li>
    <li>Familier binding pattern (to those devs who have worked with XAML at least)</li>
    <li>MIT licence</li>
    <li>Visual Studio and typescript intellisence</li>
    <li>Support for all browsers</li>
    <li>
        There is lots of help out there. The knockout documentation is really quite good, where that stops stack overflow takes over.
        See @Html.ActionLink("resources", "Resources", "GettingStarted") page for a sample of what is out there.
    </li>
</ul>

<h2>The Bad</h2>
<ul>
    <li>The contents of the data-bind attributes are magic strings, type with care.</li>
    <li>You end up with some duplication of you models in JS and MVC.</li>
    <li>This is not a full SPA framework, if that is what you are after you'll need somthing else as well.</li>
</ul>


<h2>The Ugly</h2>
<ul>
    <li>Those darn brackets! I have lost so much time to forgetting them...... </li>
</ul>

@Html.ActionLink("Alternatives to KnockoutJS >>", "Comparisons", null, new { @class="btn btn-default" })