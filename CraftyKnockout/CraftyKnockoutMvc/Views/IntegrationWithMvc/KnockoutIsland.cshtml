@model CraftyKnockoutMvc.Models.KnockoutIslandModel
@{
    ViewBag.Title = "KnockoutIsland";
}

<h2>A Knockout Island</h2>
<p>
    The idea behind Knockout Islands is that you require the power of knockout to handle a collection in only part of your view.
    In this example we are assuming that you need to handle a collection of items within an existing MVC view.
</p>

@using (Html.BeginForm())
{
    <div class="panel panel-primary">
        <div class="panel-heading">
            <h4 class="panel-title">Plan your event, enter details and click Save.</h4>
            <div class="rightalign">
                <button type="button" class="btn btn-default" onclick="$('form').submit()">
                    <span class="glyphicon glyphicon-floppy-disk"></span>
                    Save Event
                </button>
            </div>
        </div>
        <div class="panel-body">
            <div class="row">
                <div class="col-md-6">
                    @Html.LabelFor(m => m.Event.EventName)
                </div>
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.Event.EventName, new { @class = "form-control" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    @Html.LabelFor(m => m.Event.Location)
                </div>
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.Event.Location, new { @class = "form-control" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    @Html.LabelFor(m => m.Event.DateOfEvent)
                </div>
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.Event.DateOfEvent, new { @class = "form-control", type = "date" })
                </div>
            </div>
            <p>&nbsp;</p>

            <!-- Add JSON containing the Model-->
            @Html.Hidden("eventModelJson", @Html.Raw(Json.Encode(Model)))

            <!-- This is where we want the KO Island to be-->
            <div class="panel panel-success">
                <div class="panel-heading">
                    Event Speakers. <span data-bind="text: EventModel.Event.Speakers().length + ' sessions selected'"></span>
                </div>
                <div class="panel-body">
                    <div class="list-group" data-bind="template: { name: 'SpeakerRowTemplate', foreach: EventModel.Event.Speakers }"></div>
                </div>
            </div>

            <div class="panel panel-info">
                <div class="panel-heading">
                    Submitted Sessions
                </div>
                <div class="panel-body">
                    <div class="list-group" data-bind="template: { name: 'PossibleSpeakerRowTemplate', foreach: EventModel.PossibleSpeakers }"></div>
                </div>
            </div>

        </div>
    </div>
}

<!-- Knockout Template for possible speakers -->
<script type="text/html" id="PossibleSpeakerRowTemplate">
    <div class="list-group-item">
        <b><span data-bind="text: CoderName"></span></b> speaking about <span data-bind="text: FamousFor"></span>
        <br />
        <div class="rightalign">
            <div class="btn" data-bind="click: $root.AddSpeaker">
                <span class="glyphicon glyphicon-plus-sign right"></span> Add speaker to event
            </div>
        </div>
    </div>
</script>


<!-- Knockout Template for selected speakers-->
<script type="text/html" id="SpeakerRowTemplate">
    <div class="list-group-item">
        <div class="list-group-item-heading">
            <span class="badge" data-bind="text: 'Session No.' + ($index() + 1)">session</span>
            <b><span data-bind="text: CoderName"></span></b> speaking about <span data-bind="text: FamousFor"></span>
        </div>
        <div class="list-group-item-text">
            @Html.TextBoxFor(m => m.Event.Speakers.FirstOrDefault().CoderName, new
                                    {
                                        data_bind = "value: CoderName, attr: { name: 'Event.Speakers[' + $index() +'].CoderName', id: 'Event_Speakers_' + $index() +'__CoderName' }",
                                        @class = "form-control"
                                    })

            @Html.TextBoxFor(m => m.Event.Speakers.FirstOrDefault().FamousFor, new
                                    {
                                        data_bind = "value: FamousFor, attr: { name: 'Event.Speakers[' + $index() +'].FamousFor', id: 'Event_Speakers_' + $index() +'__FamousFor' }",
                                        @class = "form-control",
                                    })

            @Html.HiddenFor(m => m.Event.Speakers.FirstOrDefault().Id, new
                                   {
                                       data_bind = "value: 1 + $index(), attr: { name: 'Event.Speakers[' + $index() +'].Id', id: 'Event_Speakers_' + $index() +'Id' }"
                                   })

    <div class="rightalign">
        <div class="btn" data-bind="click: $root.RemoveSpeaker">
            <span class="glyphicon glyphicon-minus-sign right"></span> Remove Speaker
        </div>
    </div>
</div>
</div>
</script>


@section Scripts {
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/Scripts/IntegrationWithMvc/KnockoutIsland.js")
}
