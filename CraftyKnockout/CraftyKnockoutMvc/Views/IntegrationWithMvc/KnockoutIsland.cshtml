@model CraftyKnockoutMvc.Models.KnockoutIslandModel
@{
    ViewBag.Title = "KnockoutIsland";
}

<h2>A Knockout Island</h2>
<p>
    The idea behind Knockout Islands is that you require the power of knockout to handle a collection in only part of your view.
    In this example we are assuming that you need to handle a collection of items within an existing MVC view.
</p>

@using (Html.BeginForm())
{
    <div class="panel panel-primary">
        <div class="panel-heading">
            <h4 class="panel-title">Plan your event, enter details and click Save.</h4>
            <div class="rightalign">
                <button type="button" class="btn btn-default" onclick="$('form').submit()">
                    <span class="glyphicon glyphicon-floppy-disk"></span>
                    Save Event
                </button>
            </div>
        </div>
        <div class="panel-body">
            <div class="row">
                <div class="col-md-6">
                    @Html.LabelFor(m => m.Event.EventName)
                </div>
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.Event.EventName, new { @class = "form-control" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    @Html.LabelFor(m => m.Event.Location)
                </div>
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.Event.Location, new { @class = "form-control" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    @Html.LabelFor(m => m.Event.DateOfEvent)
                </div>
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.Event.DateOfEvent, new { @class = "form-control", type = "date" })
                </div>
            </div>

            <!-- Add JSON containing the Model-->
            @Html.Hidden("eventModelJson", @Html.Raw(Json.Encode(Model)))

            <!-- This is where we want the KO Island to be-->
            <div class="panel">
                <div class="panel-heading">
                    <span data-bind="text: Event.EventName"></span> Event Speakers.
                </div>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-8">
                            selected speakers
                            <div class="list-group" data-bind="template: { name: 'SpeakerRowTemplate', foreach: Event.Speakers }"></div>
                        </div>
                        <div class="col-md-4">
                            possible speakers
                            <div class="list-group" data-bind="template: { name: 'PossibleSpeakerRowTemplate', foreach: PossibleSpeakers }"></div>
                        </div>
                    </div>

                </div>
            </div>

        </div>
    </div>

}

<script type="text/html" id="PossibleSpeakerRowTemplate">
    <a href="#">
        <div class="list-group-item">
            <b><span data-bind="text: CoderName"></span></b> speaking about <span data-bind="text: FamousFor"></span>
            <br />
            <div class="btn">
                @*data-bind="click: $root.RemoveSpeaker">*@
                <span class="glyphicon glyphicon-plus-sign right"></span> Add To Event
            </div>
        </div>
    </a>
</script>


<!-- Knockout Template -->
<script type="text/html" id="SpeakerRowTemplate">
    <a href="#">
        <div class="list-group-item-heading">
            <div>Name of Speaker:</div>
            <div>@Html.TextBoxFor(m => m.Event.Speakers.FirstOrDefault().CoderName, new { data_bind = "value: CoderName", @class = "form-control" })</div>
        </div>
        @*
            <input class="text-box single-line" type="number"
                   data-bind="value: DwellingsTypes,
                    valueUpdate: 'afterkeydown',
                        attr: {
                        name: 'DwellingDetails[' + $index() + '].DwellingsTypes',
                        id: 'DwellingDetails_' + $index() + '__DwellingsTypes'
                        } " />

            <span>Is famous for</span>@Html.TextAreaFor(m => m.FirstOrDefault().FamousFor, new { data_bind = "text:FamousFor", @class = "form-control" })


            <span>How do they score?</span> @Html.TextBoxFor(m => m.FirstOrDefault().FameScore, new { data_bind = "value:FameScore", @class = "form-control rightalign", type = "number" })*@

        @*<div class="rightalign">
                 //NB. Use the $root to get to the root of the view model, without it the template will think the method is on the current record
                <div class="btn" data-bind="click: $root.RemoveSpeaker">
                    <span class="glyphicon glyphicon-trash right"></span> Remove Speaker
                </div>
            </div>*@
    </a>

</script>


@section Scripts {
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/Scripts/IntegrationWithMvc/KnockoutIsland.js")
}
