@model CraftyKnockoutMvc.Models.KnockoutIslandModel
@{
    ViewBag.Title = "KnockoutIsland";
}

<h2>A Knockout Island</h2>
<p>
    The idea behind Knockout Islands is that you require the power of knockout to handle a collection in only part of your view.
    In this example we are assuming that you need to handle a collection of items within an existing MVC view.
</p>

@using (Html.BeginForm())
{
    <div class="panel panel-primary">
        <div class="panel-heading">
            <h4 class="panel-title">Plan your event, enter details and click Save.</h4>
        </div>
        <div class="panel-body">
            <div class="row">
                <div class="col-md-6">
                    @Html.LabelFor(m => m.Event.EventName)
                </div>
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.Event.EventName, new { @class = "form-control" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    @Html.LabelFor(m => m.Event.Location)
                </div>
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.Event.Location, new { @class = "form-control" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    @Html.LabelFor(m => m.Event.DateOfEvent)
                </div>
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.Event.DateOfEvent, new { @class = "form-control", type="date" })
                </div>
            </div>




        </div>
    </div>
    <button type="button" class="btn btn-default" onclick="$('form').submit()">
        <span class="glyphicon glyphicon-floppy-disk"></span>
        Save Event
    </button>
}



        <!-- Knockout Template -->
<script type="text/html" id="SpeakerRowTemplate">
    <a href="#" data-bind="css: {'list-group-item': true }">
        <!-- We have to use TextBoxFor because the EditorFor does not allow us to specify the HTML attributes-->
        <!-- We use First or Default because this is used only to create the template, the values will be overwritten by knockout when binding to this template-->
        <!-- we could just write the HTML ourselves rather than using the helpers but this way any validation will also be included -->
        <!-- We have to substitute an underscore for the hyphen in the data-bind attribute to allow Razor to compile. This will be converted back into a hyphen for us.-->

        @*<span class="list-group-item-heading">Name of Coder:</span>@Html.TextBoxFor(m => m.FirstOrDefault().CoderName, new { data_bind = "value:CoderName", @class = "form-control" })


        <input class="text-box single-line" type="number"
               data-bind="value: DwellingsTypes,
                valueUpdate: 'afterkeydown',
                    attr: {
                    name: 'DwellingDetails[' + $index() + '].DwellingsTypes',
                    id: 'DwellingDetails_' + $index() + '__DwellingsTypes'
                    } " />

        <span>Is famous for</span>@Html.TextAreaFor(m => m.FirstOrDefault().FamousFor, new { data_bind = "text:FamousFor", @class = "form-control" })


        <span>How do they score?</span> @Html.TextBoxFor(m => m.FirstOrDefault().FameScore, new { data_bind = "value:FameScore", @class = "form-control rightalign", type = "number" })*@

        <div class="rightalign">
            <!-- NB. Use the $root to get to the root of the view model, without it the template will think the method is on the current record-->
            <div class="btn" data-bind="click: $root.RemoveSpeaker">
                <span class="glyphicon glyphicon-trash right"></span>
            </div>
        </div>
    </a>

</script>


@section Scripts {
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/Scripts/IntegrationWithMvc/EditHallOfFame.js")
}
