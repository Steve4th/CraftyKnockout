@model IEnumerable<CraftyKnockoutMvc.Models.FamousCoder>
@{
    ViewBag.Title = "EditHallOfFame";
}

<!-- Add a hidden field with the model in JSON form. Knockout can then use this to seed the view model-->
@Html.Hidden("initialCoderListJson", @Html.Raw(Json.Encode(Model)))

<h2>Edit the Hall Of Fame</h2>
<p>This example uses Knockout Utils to convert the view model to JSON and then post it back to the server.</p>

<div class="panel panel-primary">
    <div class="panel-heading">
        @*<h3 class="panel-title">Crafty Coders Editable Hall of Fame</h3>*@
        <div class="rightalign" data-bind="visible: FamousCoderCount() > 0">
            We have <span data-bind="text: FamousCoderCount()">?</span> entries in the hall.
            
        </div>
        <div data-bind="visible: NewCoderCount">
            You have added <span data-bind="text: NewCoderCount()">?</span> new entries to the hall
        </div>

        <button type="button" class="btn btn-default" data-bind="click: AddCoder">
            <span class="glyphicon glyphicon-plus"></span> Add New Entry
        </button>

        <button type="button" class="btn btn-default" data-bind="click:SaveIt">
            <span class="glyphicon glyphicon-floppy-disk"></span>
            Save Updates
        </button>
    </div>

    <div class="panel-body">

        <div class="list-group" data-bind="template: { name: 'coderrowtemplate', foreach: FamousCoders }"></div>

        <!-- Knockout Template -->
        <!-- We have to use TextBoxFor because the EditorFor does not allow us to specify the HTML attributes-->
        <!-- We use First or Default because this is used only to create the template, the values will be overwritten by knockout when binding to this template-->
        <!-- we could just write the HTML ourselves rather than using the helpers but this way any validation will also be included -->
        <!-- We have to substitute an underscore for the hyphen in the data-bind attribute to allow Razor to compile. This will be converted back into a hyphen for us.-->

        <script type="text/html" id="coderrowtemplate">
            <div class="panel panel-default">
                <div class="row">
                    <div class="col-md-4">
                        Name of Coder:
                    </div>
                    <div class="col-md-8">
                        @Html.TextBoxFor(m => m.FirstOrDefault().CoderName, new { data_bind = "value: CoderName", @class = "form-control" })
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4">
                        Is famous for
                    </div>
                    <div class="col-md-8">
                        @Html.TextAreaFor(m => m.FirstOrDefault().FamousFor, new { data_bind = "value: FamousFor", @class = "form-control" })
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4">
                        Score?
                    </div>
                    <div class="col-md-8">
                        @Html.TextBoxFor(m => m.FirstOrDefault().FameScore, new { data_bind = "value: FameScore", @class = "form-control rightalign", type = "number" })
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-12 rightalign">
                        <!-- NB. Use the $root to get to the root of the view model, without it the template will think the method is on the current record-->
                        <div class="btn" data-bind="click: RemoveCoder">
                            <span class="glyphicon glyphicon-trash right"></span> Remove
                        </div>
                    </div>
                </div>
            </div>
        </script>

    </div>
</div>



@section Scripts {
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/Scripts/IntegrationWithMvc/EditHallOfFame.js")
}
